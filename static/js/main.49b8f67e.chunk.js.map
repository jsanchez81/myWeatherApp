{"version":3,"sources":["components/WeatherLocation/Location.js","components/WeatherLocation/WeatherData/WeatherExtraInfo.js","components/WeatherLocation/WeatherData/WeatherTemperature.js","components/WeatherLocation/WeatherData/index.js","constantes/weathers.js","components/WeatherLocation/index.js","App.js","serviceWorker.js","index.js"],"names":["Location","city","className","prototypes","PropTypes","string","isRequired","WeatherExtraInfo","humidity","wind","WeatherTemperature","Component","temperature","size","color","getWeatherIcon","WeatherData","data","iconStateComponent","weatherStateComponent","WEATHER_STATE","WiAlien","WiBarometer","WiCelsius","WiCloudDown","WiCloudRefresh","WiCloudUp","WiCloud","WiCloudy","iconState","cloud","iconState2","dayCloudyW","data2","WeatherLocation","handleUpdateClick","setState","console","log","state","this","onClick","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"wSAIMA,G,KAAW,SAAC,GAAD,IAAEC,EAAF,EAAEA,KAAF,OACb,yBAAKC,UAAU,gBACX,4BACKD,MAKbD,EAASG,WAAa,CAClB,KAASC,IAAUC,OAAOC,YAGfN,QCGAO,G,KAhBU,SAAC,GAAoB,IAAnBC,EAAkB,EAAlBA,SAAUC,EAAQ,EAARA,KAEjC,OACI,yBAAKP,UAAU,wBACX,0BAAMA,UAAU,iBAAhB,mBAA6CM,EAA7C,OACA,0BAAMN,UAAU,iBAAhB,mBAA6CO,OCiB1CC,EAZY,SAAC,GAAD,IAAEC,EAAF,EAAEA,UAAWC,EAAb,EAAaA,YAAb,OACvB,yBAAKV,UAAU,0BAVI,SAACS,GAGpB,OACI,kBAACA,EAAD,CAAWT,UAAU,QAAQW,KAHhB,GAGgCC,MAAM,SAOlDC,CAAeJ,GAChB,0BAAMT,UAAU,eAAhB,UAAkCU,IAClC,0BAAMV,UAAU,mBAAhB,WCUOc,EApBK,SAAC,GAAgE,IAAD,IAA9DC,KAAQL,EAAsD,EAAtDA,YAAYJ,EAA0C,EAA1CA,SAASC,EAAiC,EAAjCA,KACzCS,EAD0E,EAA1BC,sBAItD,OACI,yBAAKjB,UAAU,mBACX,kBAAC,EAAD,CAAoBS,UAAWO,EAAoBN,YAAaA,IAChE,kBAAC,EAAD,CAAkBJ,SAAUA,EAAUC,KAAMA,M,OCFlDW,EAAgB,CAClB,MAAUC,IACV,UAAcC,IACd,QAAYC,IACZ,UAAcC,IACd,aAAiBC,IACjB,QAAYC,IACZ,MAAUC,IACV,WAAeC,KCdbC,EDiBST,ECjBiBU,MAC1BC,EDgBSX,EChBkBY,WAC3Bf,EAAO,CACT,YAAgB,EAChB,SAAa,GACb,KAAS,UAGPgB,EAAQ,CACV,YAAgB,GAChB,SAAa,GACb,KAAS,WA2CEC,E,kDA/BX,aAAc,IAAD,8BACT,gBAQJC,kBAAmB,WACf,EAAKC,SAAS,CACV,KAAS,SACT,KAASH,EACT,UAAcF,IAElBM,QAAQC,IAAI,mBAbZ,EAAKC,MAAQ,CACT,KAAS,eACT,KAAStB,EACT,UAAcY,GALT,E,qDAkBJ,IAAD,EAC4BW,KAAKD,MAA9BtC,EADH,EACGA,KAAMgB,EADT,EACSA,KAAMY,EADf,EACeA,UACnB,OACI,yBAAK3B,UAAU,uBACX,kBAAC,EAAD,CAAUD,KAAMA,IAChB,kBAAC,EAAD,CAAagB,KAAQA,EAAME,sBAAuBU,IAClD,4BAAQY,QAASD,KAAKL,mBAAtB,mB,GAzBcxB,aCDf+B,E,uKApBX,OACE,yBAAKxC,UAAU,OACb,kBAAC,EAAD,W,GAJUS,aCOEgC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLvB,QAAQuB,MAAMA,EAAMC,a","file":"static/js/main.49b8f67e.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport './styles.css';\r\n\r\nconst Location = ({city})=> (\r\n    <div className='locationCont'>\r\n        <h1>\r\n            {city}\r\n        </h1>\r\n    </div>\r\n);\r\n\r\nLocation.prototypes = {\r\n    'city' : PropTypes.string.isRequired\r\n}\r\n\r\nexport default Location;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport './styles.css';\r\nconst WeatherExtraInfo = ({humidity, wind})=>{\r\n\r\n    return(\r\n        <div className='weatherExtraInfoCont'>\r\n            <span className='extraInfoText'>{`Humedad: ${humidity} %`}</span>\r\n            <span className='extraInfoText'>{`Vientos: ${wind}`}</span>\r\n        </div>\r\n    )\r\n};\r\n\r\n\r\nWeatherExtraInfo.propTypes = {\r\n    'humidity' : PropTypes.number.isRequired,\r\n    'wind'    :  PropTypes.string.isRequired\r\n}\r\n\r\nexport default WeatherExtraInfo;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport './styles.css';\r\n\r\nconst getWeatherIcon = (Component)=>{\r\n    const sizeIcon = 30;\r\n\r\n    return(\r\n        <Component className='wicon' size={sizeIcon} color='blue'/>\r\n    ) \r\n}\r\n\r\n\r\nconst WeatherTemperature = ({Component, temperature})=>(\r\n    <div className='weatherTemperatureCont'>\r\n        {getWeatherIcon(Component)}\r\n        <span className='temperature'>{`${temperature}`}</span>\r\n        <span className='temperatureType'>{`CÂº`}</span>\r\n    </div>\r\n);\r\n\r\nWeatherTemperature.propTypes = {\r\n    'temperature' : PropTypes.number.isRequired\r\n}\r\n\r\nexport default WeatherTemperature;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport WeatherExtraInfo from './WeatherExtraInfo';\r\nimport WeatherTemperature from './WeatherTemperature';\r\nimport './styles.css';\r\n\r\n//Doble destructuring\r\nconst WeatherData = ({data : {temperature,humidity,wind}, weatherStateComponent })=>{\r\n    const iconStateComponent = weatherStateComponent;\r\n    // const {temperature,humidity,wind} = data;\r\n    \r\n    return (\r\n        <div className='weatherDataCont'>\r\n            <WeatherTemperature Component={iconStateComponent} temperature={temperature} />\r\n            <WeatherExtraInfo humidity={humidity} wind={wind}/>\r\n        </div>\r\n    )\r\n};\r\n\r\nWeatherData.propTypes ={\r\n    'data' : PropTypes.shape({\r\n        'temperature' : PropTypes.number.isRequired,\r\n        'humidity' : PropTypes.number.isRequired,\r\n        'wind' : PropTypes.string.isRequired\r\n    })\r\n}\r\n\r\nexport default WeatherData;\r\n\r\n","import {\r\n    WiAlien,\r\n    WiBarometer,\r\n    WiCelsius,\r\n    WiCloudDown,\r\n    WiCloudRefresh,\r\n    WiCloudUp,\r\n    WiCloud,\r\n    WiCloudy,\r\n} from 'weather-icons-react';\r\n\r\n\r\nconst WEATHER_STATE = {\r\n    'alien' : WiAlien,\r\n    'barometer' : WiBarometer,\r\n    'celsius' : WiCelsius,\r\n    'cloudDown' : WiCloudDown,\r\n    'cloudRefresh' : WiCloudRefresh,\r\n    'cloudUp' : WiCloudUp,\r\n    'cloud' : WiCloud,\r\n    'dayCloudyW' : WiCloudy\r\n}\r\n\r\nexport default WEATHER_STATE;","import React, {Component} from 'react';\r\nimport Location from './Location';\r\nimport WeatherData from './WeatherData'\r\nimport WEATHER_STATE from './../../constantes/weathers';\r\nimport './styles.css';\r\n\r\nconst iconState = WEATHER_STATE.cloud;\r\nconst iconState2 = WEATHER_STATE.dayCloudyW;\r\nconst data = {\r\n    'temperature' : 6,\r\n    'humidity' : 10,\r\n    'wind' : '10 m/s'\r\n}\r\n\r\nconst data2 = {\r\n    'temperature' : 29,\r\n    'humidity' : 90,\r\n    'wind' : '100 m/s',\r\n    \r\n}\r\n\r\n// const WeatherLocation = () =>  (\r\n//     <div className='weatherLocationCont'>\r\n//         <Location city={\"Madrid\"} />\r\n//         <WeatherData data = {data} weatherStateComponent={iconState} />\r\n//     </div>\r\n// );\r\n\r\nclass WeatherLocation extends Component{\r\n    constructor(){\r\n        super();\r\n        this.state = {\r\n            'city' : 'Buenos Aires',\r\n            'data' : data,\r\n            'iconState' : iconState\r\n        };\r\n    }\r\n\r\n    handleUpdateClick= ()=>{\r\n        this.setState({\r\n            'city' : 'Madrid',\r\n            'data' : data2,\r\n            'iconState' : iconState2\r\n        })\r\n        console.log(\"Actualizado!!!\");\r\n    }\r\n\r\n    render(){\r\n        const {city, data, iconState} = this.state;\r\n        return (\r\n            <div className='weatherLocationCont'>\r\n                <Location city={city} />\r\n                <WeatherData data = {data} weatherStateComponent={iconState} />\r\n                <button onClick={this.handleUpdateClick}>Actualizar</button>\r\n            </div>\r\n        );\r\n    }\r\n\r\n}\r\n\r\nexport default WeatherLocation;\r\n\r\n","import React, { Component } from 'react';\n// import logo from './logo.svg';\nimport './App.css';\nimport WeatherLocation from './components/WeatherLocation';\n\nclass App extends Component{\n  render(){\n    return (\n      <div className=\"App\">\n        <WeatherLocation/>\n      </div>\n    );\n  }\n}\n\n// function App() {\n//   return (\n//     <div className=\"App\">\n//       <header className=\"App-header\">\n//         <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        \n       \n//       </header>\n//     </div>\n//   );\n// }\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}